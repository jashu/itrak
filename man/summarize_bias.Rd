% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summarize_bias.R
\name{summarize_bias}
\alias{summarize_bias}
\title{Summary of attention bias metrics}
\usage{
summarize_bias(data, measure, trial_type, reference = NULL,
  search_limit = 5)
}
\arguments{
\item{data}{A data frame or table.}

\item{measure}{The name of the column in \code{data} that contains
chronologically ordered observations of numeric type.}

\item{trial_type}{The name of the column in \code{data} that provides the
trial type of the corresponding row of \code{measure}. \code{trial_type}
must be a dichotomous factor (having exactly 2 levels) or convertible to
such.}

\item{reference}{Value indicating which level of trial \code{type} should
come first when subtracting trials of opposite type to generate a bias
score: \eqn{bias = reference type - opposite type}. If \code{type} is of
class \code{factor}, defaults to the first factor level; otherwise defaults
to the trial type that comes first alphanumerically.}

\item{search_limit}{When calculating trial-level bias, how many trials to
look forward or backward to find a trial of opposite type. Default value is
5. If no match is found within the \code{search_limit} of a trial, \code{NA}
will be assigned to that trial.}
}
\description{
\code{summarize_bias} combines the \code{\link{get_bs}} and
\code{\link{get_tlbs}} functions to generate a traditional attention bias
metric as well as summary metrics of trial-level attention bias.
}
\section{IMPORTANT}{

Before calling this function, ensure that the data being passed have been
grouped into sets of trials, with each set containing a single series of
measurements belonging to a single individual. \code{\link[dplyr]{group_by}}
is recommended for this purpose. If you receive an output that has less or
more rows of observations than you were expecting, incorrect grouping is
likely to blame.
}

\section{SUPER IMPORTANT}{

You must also ensure that each set of trials is in chronological order.
Otherwise, the trial-level bias calculation will be wrong, and there will be
no obvious sign that this has happened. To ensure proper grouping and
ordering, it is recommended that prior to calling this function you sort your
data using \code{\link[dplyr]{arrange}(data, g1, ..., trial)} where \code{g1}
is your primary grouping variable (most likely `subject` or `id`) followed by
any secondary grouping variables (e.g., 'session', 'category') and ending with
the variable that gives the \code{trial} number. This should then be piped to
\code{\link[dplyr]{group_by}(g1, ...)}, where \code{g1, ...} corresponds
precisely to the same grouping variables used in the call to
\code{\link[dplyr]{arrange}}. (Do NOT include \code{trial} in the call to
\code{\link[dplyr]{group_by}}.) The result is then ready to be piped to the
\code{summarize_bias} function.
}
\examples{
# Create example data frame containing 10 time series of 10 reaction times
# and trial types of congruent ('con') vs. incongruent ('incon'):
data <- data.frame(id = rep(1:10, each = 10),
                   rt = sample(500:5000, 100),
                   type = sample(c("con","incon"), 100, replace = TRUE),
                   trial = rep(1:10, 10))

# Use dplyr to sort by trial and group by id and then generate bias summary
# specifying that congruent trials should be subtracted from incongruent by
# setting reference to "incon":
data \%>\%
arrange(id, trial) \%>\%
group_by(id) \%>\%
summarize_bias(measure = rt, trial_type = type, reference = 'incon')

}
\seealso{
\code{\link{get_bs}}, \code{\link{get_tlbs}},
\code{\link[dplyr]{mutate}}, \code{\link[dplyr]{summarize}}
}

